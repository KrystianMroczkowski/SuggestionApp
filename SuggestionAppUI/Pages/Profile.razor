@page "/Profile"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager

<h1>My Profile</h1>

<div>
	<div>
		<button @onclick="ClosePage"></button>
	</div>
</div>

<div>
	<h2>My Account</h2>
	<p>
		<a href="MicrosoftIdentity/Account/EditProfile">
			Edit my Profile
		</a>
	</p>
</div>

@if (approved?.Count > 0)
{
	<div>
		<h2>Approved Suggestions</h2>
		<p>These are your suggestions that are currently active.</p>

		<hr />
		@foreach (var s in approved)
		{
			<div>
				@s.Suggestion
			</div>
			<p>
				@s.DateCreated.ToString("MM.dd.yyyy")
			</p>
			<p>
				@s.UserVotes.Count
			</p>
			<p>
				@s.Category.CategoryName
			</p>
			<p>
				@s.Description
			</p>
			@if (s.SuggestionStatus is not null)
			{
				<div>
					@s.SuggestionStatus.StatusName
				</div>
				<p>
					@((MarkupString)s.OwnerNotes)
				</p>
			}
		}
	</div>
}

@if (archived?.Count > 0)
{
	<div>
		<h2>Archived Suggestions</h2>
		<p>These are your suggestions that were active but did not gain enough traction.</p>

		<hr />
		@foreach (var s in archived)
		{
			<div>
				@s.Suggestion
			</div>
			<p>
				@s.DateCreated.ToString("MM.dd.yyyy")
			</p>
			<p>
				@s.UserVotes.Count
			</p>
			<p>
				@s.Category.CategoryName
			</p>
			<p>
				@s.Description
			</p>
			@if (s.SuggestionStatus is not null)
			{
				<div>
					@s.SuggestionStatus.StatusName
				</div>
				<p>
					@((MarkupString)s.OwnerNotes)
				</p>
			}
		}
	</div>
}

@if (pending?.Count > 0)
{
	<div>
		<h2>Pending Suggestions</h2>
		<p>These are your suggestions that have not yet been reviewed by the adimnistrators.</p>

		<hr />
		@foreach (var s in pending)
		{
			<div>
				@s.Suggestion
			</div>
			<p>
				@s.DateCreated.ToString("MM.dd.yyyy")
			</p>
			<p>
				@s.UserVotes.Count
			</p>
			<p>
				@s.Category.CategoryName
			</p>
			<p>
				@s.Description
			</p>
			@if (s.SuggestionStatus is not null)
			{
				<div>
					@s.SuggestionStatus.StatusName
				</div>
				<p>
					@((MarkupString)s.OwnerNotes)
				</p>
			}
		}
	</div>
}

@if (rejected?.Count > 0)
{
	<div>
		<h2>Rejected Suggestions</h2>
		<p>These are your suggestions that were not deemed to be appropriate for the training suggestion site..</p>

		<hr />
		@foreach (var s in rejected)
		{
			<div>
				@s.Suggestion
			</div>
			<p>
				@s.DateCreated.ToString("MM.dd.yyyy")
			</p>
			<p>
				@s.UserVotes.Count
			</p>
			<p>
				@s.Category.CategoryName
			</p>
			<p>
				@s.Description
			</p>
			@if (s.SuggestionStatus is not null)
			{
				<div>
					@s.SuggestionStatus.StatusName
				</div>
				<p>
					@((MarkupString)s.OwnerNotes)
				</p>
			}
		}
	</div>
}



@code {
	private UserModel loggedInUser;
	private List<SuggestionModel> submissions;
	private List<SuggestionModel> approved;
	private List<SuggestionModel> archived;
	private List<SuggestionModel> pending;
	private List<SuggestionModel> rejected;

	protected async override Task OnInitializedAsync()
	{
		loggedInUser = await authProvider.GetUserFromAuth(userData);
		var results = await suggestionData.GetAllUsersSuggestions(loggedInUser.Id);

		if(loggedInUser is not null && results is not null)
		{
			submissions = results.OrderByDescending(x => x.DateCreated).ToList();
			approved = submissions.Where(x => x.ApprovedForRelease && x.Archived == false && x.Rejected == false).ToList();
			archived = submissions.Where(x => x.Archived && x.Rejected == false).ToList();
			pending = submissions.Where(x => x.ApprovedForRelease == false &&  x.Rejected == false).ToList();
			rejected = submissions.Where(x => x.Rejected).ToList();
		}
	}

	private void ClosePage()
	{
		navManager.NavigateTo("/");
	}

}
